pragma solidity ^0.5.1;
pragma experimental ABIEncoderV2;

/**
 * title SafeMath
 * @dev Math operations with safety checks that throw on error
*/

library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    if (a == 0) {
      return 0;
    }
    c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }
}

contract Ownable {
    
    address public owner;
    
    constructor() public {
        owner = msg.sender;
    }
    
    modifier onlyGroup1() {
        if (
            msg.sender != 0x0Bfad66166590CB206b2300ac6e964C73CE0B763 &&
            msg.sender != 0xE1a0EE7F8BF242766402bCaA644112e81F7c54FF &&
            msg.sender != 0x5b2F98d97369C88c98912ceBf66aa4f9eFf4CE32
        ) {
            revert();
        }
        _;
    }
    
    modifier onlyGroup2() {
        if (
            msg.sender != 0xD357dE50C1Dd692DbC5B1026E8C34D0769D1DB63 &&
            msg.sender != 0xA35FF087631221490b65D44164CdCB03e95E0cD5 &&
            msg.sender != 0x6584Fa88EfeBF5E29D4616940d3371fF27856CDa
        ) {
            revert();
        }
        _;
    }
    
    modifier onlyGroup3() {
        if (
            msg.sender != 0xd13445De80a7c85Ba10294Df8fB676f122891a29 &&
            msg.sender != 0x82E2365cE74518Caa3D66fE8fEfFF5b313581BAB &&
            msg.sender != 0x6B2332076a7b7f6dD68bB67De1E6BA53222544Bb
        ) {
            revert();
        }
        _;
    }
    
    modifier onlyOwner() {
        if (msg.sender != owner) {
            revert();
        }
        _;
    }
}

contract Grizzpain is Ownable{
    using SafeMath for uint;
    
    struct game {
        string[] players;
        string winner;
    }
    struct player {
        bool isRegistered;
        string referrer;
    }
    uint private point;
    uint private nonce;
    uint private systemCommission = 15;
    uint private referrerCommission = 5;
    uint private systemCommissionAmount = 0;
    uint private referrerCommissionAmount = 0;
    
    mapping(bytes => bytes32) private keys;
    mapping(bytes => bytes32) private joinKeys;
    mapping(bytes => bytes32) private regKeys;
    mapping(bytes => uint) private balances;
    mapping(bytes => uint) private holds;
    mapping(string => game) private games;
    mapping(bytes => player) private players;
    
    event NewCommision(uint systemCommission, uint referrerCommission);
    event SignUp(string uid, string referrer);
    event PayIn(address from, bytes uid, uint amount);
    event PlayerJoin(string uid, string game_id, uint fee);
    event PlayerNumbers(string uid, uint index, uint fallbackNumber, uint regNumber, uint joinNumber, uint gameNumber);
    event GameResult(string uid, uint profit, uint sum, uint playersCount, uint index);
    event Widraw(address wallet, string uid, uint amount);
    event Error(string uid, string description);
    
    constructor(uint _point) public {
        point = _point;
        nonce++;
    }
    
    function draw(uint minBalance, string memory game_id, string[] memory _uids) payable onlyGroup1 public {
        nonce++;
        uint sum = 0;
        uint i = 0;
        for (i = 0; i < _uids.length; i++) {
            if (holds[bytes(_uids[i])] < minBalance) {
                emit Error(_uids[i], "not enough balance");
                revert();
            }
        }
        for (i = 0; i < _uids.length; i++) {
            uint fallbackNumber = uint(keys[bytes(_uids[i])]) % point;
            uint regNumber = uint(regKeys[bytes(_uids[i])]) % point;
            uint joinNumber = uint(joinKeys[bytes(_uids[i])]) % point;
            uint gameNumber = fallbackNumber + regNumber + joinNumber + (nonce % point);
            emit PlayerNumbers(_uids[i], i, fallbackNumber, regNumber, joinNumber, gameNumber);
            sum = sum.add(gameNumber).mul(i);
            balances[bytes(_uids[i])] = balances[bytes(_uids[i])].sub(minBalance);
            holds[bytes(_uids[i])] = holds[bytes(_uids[i])].sub(minBalance);
        }
        uint index = uint(sum % _uids.length);
        uint balance = minBalance.mul(_uids.length);
        uint systemPercent = balance.div(100).mul(systemCommission);
        systemCommissionAmount = systemCommissionAmount.add(systemPercent);
        uint profit = balance.sub(systemPercent);
        balances[bytes(_uids[index])] = balances[bytes(_uids[index])].add(profit);
        games[game_id].winner = _uids[index];
        if (players[bytes(players[bytes(_uids[index])].referrer)].isRegistered) {
            uint referrerPercent = balance.div(100).mul(referrerCommission);
            referrerCommissionAmount = referrerCommissionAmount.add(referrerPercent);
            systemCommissionAmount = systemCommissionAmount.sub(referrerPercent);
            balances[bytes(players[bytes(_uids[index])].referrer)] = 
                balances[bytes(players[bytes(_uids[index])].referrer)].add(referrerPercent);
        }
        emit GameResult(_uids[index], balance, sum, _uids.length, index);
    }
    
    function signup(string memory _uid, string memory _referrer) onlyGroup1 public {
        nonce++;
        players[bytes(_uid)].referrer = _referrer;
        players[bytes(_uid)].isRegistered = true;
        regKeys[bytes(_uid)] = keccak256(abi.encodePacked(nonce, _uid, block.number, _referrer));
        emit SignUp(_uid, _referrer);
    }
    
    function join(uint fee, string memory _uid, string memory game_id) onlyGroup1 public {
        nonce++;
        if (balances[bytes(_uid)] < fee) {
            revert();
        }
        uint i = 0;
        for (i = 0; i < games[game_id].players.length; i++) {
            if (keccak256(abi.encodePacked(games[game_id].players[i])) == keccak256(abi.encodePacked(_uid))) {
                emit Error(_uid, "Player already enrolled");
                revert();
            }
        }
        holds[bytes(_uid)] = holds[bytes(_uid)].add(fee);
        games[game_id].players.push(_uid);
        bytes32 salt = keccak256(abi.encodePacked(nonce, now, game_id, blockhash(block.number)));
        joinKeys[bytes(_uid)] = keccak256(abi.encodePacked(i + nonce, game_id, salt));
        emit PlayerJoin(_uid, game_id, fee);
    }
    
    function widraw(uint value, address payable _to, string memory _uid) payable onlyGroup2 public {
        nonce++;
        if (_to == owner) {
            address(_to).transfer(value);
            systemCommissionAmount = systemCommissionAmount.sub(value);
        } else {
            if (value > balances[bytes(_uid)].sub(holds[bytes(_uid)])) {
                revert();
            }
    	    balances[bytes(_uid)] = balances[bytes(_uid)].sub(value);
    	    value = value.sub(tx.gasprice * gasleft());
            address(_to).transfer(value);
        }
        emit Widraw(_to, _uid, value);
    }
    
    function setCommission(uint _systemCommission, uint _referrerCommission) onlyGroup3 public {
        systemCommission = _systemCommission;
        referrerCommission = _referrerCommission;
        nonce++;
        emit NewCommision(systemCommission, referrerCommission);
    }
    
    function checkPlayer(string memory game_id, string memory _uid) public view returns(bool result) {
        uint i = 0;
        for (i = 0; i < games[game_id].players.length; i++) {
            if (keccak256(abi.encodePacked(games[game_id].players[i])) == keccak256(abi.encodePacked(_uid))) {
                return true;
            }
        }
        return false;
    }
    
    function getWinner(string memory game_id) public view returns (string memory winner) {
        return games[game_id].winner;
    }
    
    function getCommissionsAmount() onlyOwner public view returns (uint _system, uint _referrer) {
        return (systemCommissionAmount, referrerCommissionAmount);
    }
    
    function ban(string memory _uid) onlyOwner public returns (bool result) {
        systemCommissionAmount = systemCommissionAmount.add(balances[bytes(_uid)]);
        players[bytes(_uid)].isRegistered = false;
        return true;
    }
    
    function leave(uint _fee, string memory _uid, string memory _gid) onlyOwner public returns (bool result) {
        uint i = 0;
        for (i = 0; i < games[_gid].players.length; i++) {
            if (keccak256(abi.encodePacked(games[_gid].players[i])) == keccak256(abi.encodePacked(_uid))) {
                holds[bytes(_uid)] = holds[bytes(_uid)].sub(_fee);
                return true;
            }
        }
        revert();
    }
    
    function transfer(uint _amount, string memory _from, string memory _to) onlyOwner public returns (bool result) {
        if (balances[bytes(_from)] < _amount) {
            revert();
        }
        balances[bytes(_from)] = balances[bytes(_from)].sub(_amount);
        balances[bytes(_to)] = balances[bytes(_to)].add(_amount);
        return true;
    }
    
    function balanceOf(string memory _uid) public view returns(uint total, uint hold) {
        return (balances[bytes(_uid)], holds[bytes(_uid)]);
    }
    
    function export() onlyOwner internal returns(mapping(bytes => uint) memory _balances) {
        return balances;
    }
    
    function () payable external {
        if (msg.value == 0 || !players[msg.data].isRegistered) {
            revert();
        }
        nonce++;
        bytes32 salt = keccak256(abi.encodePacked(block.number, now, nonce, blockhash(block.number)));
        keys[msg.data] = keccak256(abi.encodePacked(msg.value, msg.sender, salt));
        balances[msg.data] = balances[msg.data].add(msg.value);
        emit PayIn(msg.sender, msg.data, msg.value);
    }
}