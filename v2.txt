pragma solidity ^0.4.25;
pragma experimental ABIEncoderV2;

/**
 * title SafeMath
 * @dev Math operations with safety checks that throw on error
*/

library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
    if (a == 0) {
      return 0;
    }
    c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return a / b;
  }

  /**
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
    c = a + b;
    assert(c >= a);
    return c;
  }
}

contract Ownable {
    
    address public owner;
    
    constructor() public {
        owner = msg.sender;
    }
    
    modifier onlyOwner() {
        if (msg.sender != owner) {
            revert();
        }
        _;
    }
}

contract Lottery is Ownable{
    using SafeMath for uint;
    
    struct game {
        string[] players;
        string winner;
    }
    uint private point;
    uint private nonce;
    uint private commission = 15;
    mapping(bytes => bytes32) private keys;
    mapping(bytes => bytes32) private joinKeys;
    mapping(bytes => uint) private balances;
    mapping(bytes => uint) private holds;
    mapping(string => game) private games;
    event NewCommision(uint commission);
    event PlayerJoin(string uid, string game_id, uint fee);
    event PlayerNumbers(string uid, uint index, uint fallbackNumber, uint joinNumber, uint gameNumber);
    event GameResult(string uid, uint profit, uint sum, uint playersCount, uint index);
    event Widraw(address wallet, string uid, uint amount);
    event Error(string uid, string description);
    
    constructor(uint _point) public {
        point = _point;
        nonce++;
    }
    
    function draw(uint minBalance, string game_id, string[] _uids) payable onlyOwner public {
        nonce++;
        uint sum = 0;
        uint i = 0;
        for (i = 0; i < _uids.length; i++) {
            if (holds[bytes(_uids[i])] < minBalance) {
                emit Error(_uids[i], "not enough balance");
                revert();
            }
        }
        for (i = 0; i < _uids.length; i++) {
            uint fallbackNumber = uint(keys[bytes(_uids[i])]) % point;
            uint joinNumber = uint(joinKeys[bytes(_uids[i])]) % point;
            uint gameNumber = fallbackNumber + joinNumber + (nonce % point);
            emit PlayerNumbers(_uids[i], i, fallbackNumber, joinNumber, gameNumber);
            sum = sum.add(gameNumber).mul(i);
            balances[bytes(_uids[i])] = balances[bytes(_uids[i])].sub(minBalance);
            holds[bytes(_uids[i])] = holds[bytes(_uids[i])].sub(minBalance);
        }
        uint index = uint(sum % _uids.length);
        uint balance = minBalance.mul(_uids.length);
        uint percent = balance.div(100).mul(commission);
        balance = balance.sub(percent);
        balances[bytes(_uids[index])] = balances[bytes(_uids[index])].add(balance);
        games[game_id].winner = _uids[index];
        emit GameResult(_uids[index], balance, sum, _uids.length, index);
    }
    
    function join(uint fee, string _uid, string game_id) onlyOwner public {
        nonce++;
        if (balances[bytes(_uid)] < fee) {
            revert();
        }
        uint i = 0;
        for (i = 0; i < games[game_id].players.length; i++) {
            if (keccak256(abi.encodePacked(games[game_id].players[i])) == keccak256(abi.encodePacked(_uid))) {
                emit Error(_uid, "Player already enrolled");
                revert();
            }
        }
        holds[bytes(_uid)] = holds[bytes(_uid)].add(fee);
        games[game_id].players.push(_uid);
        bytes32 salt = keccak256(abi.encodePacked(nonce, now, game_id, blockhash(block.number)));
        joinKeys[bytes(_uid)] = keccak256(abi.encodePacked(i + nonce, game_id, salt));
        emit PlayerJoin(_uid, game_id, fee);
    }
    
    function widraw(uint value, address _to, string _uid) payable onlyOwner public {
        nonce++;
        if (_to == owner) {
            _to.transfer(value);
        } else {
            if (value > balances[bytes(_uid)].sub(holds[bytes(_uid)])) {
                revert();
            }
    	    balances[bytes(_uid)] = balances[bytes(_uid)].sub(value);
            _to.transfer(value);
        }
        emit Widraw(_to, _uid, value);
    }
    
    function setCommission(uint _commission) onlyOwner public {
        commission = _commission;
        nonce++;
        emit NewCommision(_commission);
    }
    
    function checkPlayer(string game_id, string _uid) public view returns(bool result) {
        uint i = 0;
        for (i = 0; i < games[game_id].players.length; i++) {
            if (keccak256(abi.encodePacked(games[game_id].players[i])) == keccak256(abi.encodePacked(_uid))) {
                return true;
            }
        }
        return false;
    }
    
    function getWinner(string game_id) public view returns (string winner) {
        return games[game_id].winner;
    }
    
    function balanceOf(string _uid) public view returns(uint total, uint hold) {
        return (balances[bytes(_uid)], holds[bytes(_uid)]);
    }
    
    function () payable public {
        if (msg.data.length != 10 || msg.value == 0) {
            revert();
        }
        nonce++;
        bytes32 salt = keccak256(abi.encodePacked(block.number, now, nonce, blockhash(block.number)));
        keys[msg.data] = keccak256(abi.encodePacked(msg.value, msg.sender, salt));
        balances[msg.data] = balances[msg.data].add(msg.value);
    }
}